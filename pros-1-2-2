.data
.files:
.word 0 
matrix:
    .align 4
    .byte     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
start_msg: .asciiz "Starting program...\n"
exit_msg:  .asciiz "Exiting program...\n"
# Header for matrix
pm_head:  .asciiz "  -----0----------1----------2----------3----------4----------5----------6----------7-----\n"
# Quadtree Node representation
# Recall that quadtree representation uses the following format:
#    struct qNode {
#        int leaf;
#        int size;
#        int x;
#        int y;
#        int gray_value;
#        qNode *child_NW, *child_NE, *child_SE, *child_SW;
#    }
q00:   .word  0, 8, 0, 0,  -1, 0, 0, 0, 0
qx00:  .word  1, 4, 0, 0,   1, 0, 0, 0, 0
qx40:  .word  0, 4, 4, 0,  -1, 0, 0, 0, 0
qx44:  .word  0, 4, 4, 4,  -1, 0, 0, 0, 0
qx04:  .word  1, 4, 0, 4,   2, 0, 0, 0, 0
qxx40: .word  1, 2, 4, 0,   3, 0, 0, 0, 0
qxx60: .word  1, 2, 6, 0,   4, 0, 0, 0, 0
qxx62: .word  0, 2, 6, 2,  -1, 0, 0, 0, 0
qxx42: .word  1, 2, 4, 2,   5, 0, 0, 0, 0
qxx44: .word  1, 2, 4, 4,   6, 0, 0, 0, 0
qxx64: .word  1, 2, 6, 4,   7, 0, 0, 0, 0
qxx66: .word  0, 2, 6, 6,  -1, 0, 0, 0, 0
qxx46: .word  1, 2, 4, 6,   8, 0, 0, 0, 0
qxxx62: .word 1, 1, 6, 2,   9, 0, 0, 0, 0
qxxx72: .word 1, 1, 7, 2,  10, 0, 0, 0, 0
qxxx73: .word 1, 1, 7, 3,  11, 0, 0, 0, 0
qxxx63: .word 1, 1, 6, 3,  12, 0, 0, 0, 0
qxxx66: .word 1, 1, 6, 6,  13, 0, 0, 0, 0
qxxx76: .word 1, 1, 7, 6,  14, 0, 0, 0, 0
qxxx77: .word 1, 1, 7, 7,  15, 0, 0, 0, 0
qxxx67: .word 1, 1, 6, 7,  16, 0, 0, 0, 0
.text
la t0 .files
main:
    # Load in pointers into data section because Venus does not
    # support using labels as data values
    la t0 q00
    la t1 qx00
    sw t1 20(t0)
    la t1 qx40
    sw t1 24(t0)
    la t1 qx44
    sw t1 28(t0)
    la t1 qx04
    sw t1 32(t0)
    la t0 qx40
    la t1 qxx40
    sw t1 20(t0)
    la t1 qxx60
    sw t1 24(t0)
    la t1 qxx62
    sw t1 28(t0)
    la t1 qxx42
    sw t1 32(t0)
    la t0 qx44
    la t1 qxx44
    sw t1 20(t0)
    la t1 qxx64
    sw t1 24(t0)
    la t1 qxx66
    sw t1 28(t0)
    la t1 qxx46
    sw t1 32(t0)
    la t0 qxx62
    la t1 qxxx62
    sw t1 20(t0)
    la t1 qxxx72
    sw t1 24(t0)
    la t1 qxxx73
    sw t1 28(t0)
    la t1 qxxx63
    sw t1 32(t0)
    la t0 qxx66
    la t1 qxxx66
    sw t1 20(t0)
    la t1 qxxx76
    sw t1 24(t0)
    la t1 qxxx77
    sw t1 28(t0)
    la t1 qxxx67
    sw t1 32(t0)
    # printf("%s", start_msg)
    la a1 start_msg
    jal print_str
    # quad2matrix(&q00, &matrix, 8)
    la a0 q00
    la a1 matrix
    li a2 8
    jal quad2matrix
    # print_matrix(&matrix, 8)
    la a0 matrix
    li a1 8
    li a2 8
    jal print_matrix
    # print a new line
    jal print_newline
    # printf("%s", exit_msg)
    la a1 exit_msg
    jal print_str
    # exit()
    li a0 10
    ecall
# Helper functions (may be useful for debugging)
# You can assume these don't touch any registers except
# ra, a0, and a1.
print_int:
    li a0 1
    ecall
    jr ra
print_intx:
    li a0 34
    ecall
    jr ra
print_str:
    li a0 4
    ecall
    jr ra
print_space:
    li a1 ' '
    li a0 11
    ecall
    jr ra
print_newline:
    li a1 '\n'
    li a0 11
    ecall
    jr ra
# Prints a $a1 x $a2 matrix
#
# Arguments:
#     matrix (unsigned char*)
#     matrix_width (int)
#     matrix_height (int)
print_matrix:
    addi sp sp -24
    sw ra 0(sp)
    sw s0 4(sp)
    sw s1 8(sp)
    sw s2 12(sp)
    sw s3 16(sp)
    sw s4 20(sp)
    # s0 = matrix
    mv s0 a0
    # s1 = matrix_width
    mv s1 a1
    # s2 = matrix_height
    mv s2 a2
    # printf("%s", pm_head)
    la a1 pm_head
    jal print_str
    # for (s3 = 0; s3 < height; s3++)
    mv s3 x0
pm_loop1:
    bge s3 s2 pm_loop1end
    #printf("%d ", s3)
    mv a1 s3
    jal print_int
    jal print_space
    # for (s4 = 0; s4 < width; s4++)
    mv s4 x0
pm_loop2:
    bge s4 s1 pm_loop2end
    # printf("%x ", matrix[s3 * width + s4])
    mul t5 s1 s3
    add t5 t5 s4
    add t5 s0 t5
    lbu a1 0(t5)
    jal print_intx
    jal print_space
    addi s4 s4 1
    j pm_loop2
pm_loop2end:
    # printf("\n")
    jal print_newline
    addi s3 s3 1
    j pm_loop1
pm_loop1end:
    lw ra 0(sp)
    lw s0 4(sp)
    lw s1 8(sp)
    lw s2 12(sp)
    lw s3 16(sp)
    lw s4 20(sp)
    addi sp sp 24
    jr ra
# Decodes a quadtree to the original matrix
#
# Arguments:
#     quadtree (qNode*) -- a0
#     matrix (void*)  -- a1
#     matrix_width (int)  -- a2
#
# Recall that quadtree representation uses the following format:
#     struct qNode {
#         int leaf;
#         int size;
#         int x;
#         int y;
#         int gray_value;
#         qNode *child_NW, *child_NE, *child_SE, *child_SW;
#     }
quad2matrix:
    # Your code here
    beq a0 x0 exit
    lw s0, 0(a0) # load the value of leaf into s0
    beq s0, x0, children # if leaf == 0, goes to its children(start recursive)
    # homogeneous, if leaf !=0
    lw s1 4(a0) # s1 = node->size
    lw s2 8(a0) # s2 = node->x
    lw s3 12(a0) # s3 = node->y
    # release all the pixels in this area
    addi t1, x0, -1 # the index of x, i = t1
loop_visit_x:
    addi t1, t1, 1
    beq t1, s1, exitloop # all pixels are visited, if not, go down
    addi t2, x0, 0 # the index of y, j = t2
loop_visit_y:
    beq t2, s1, loop_visit_x # as all the pixels in a same row are visited, go to the predominant loop
    add t3, t2, s3 # t3 =j + y
    mul t3, t3, a2 # t3 = (j + y) * matrix_width
    add t3, t3, t1 # t3 = t3 + i
    add t3, t3, s2 # t3 = t3 + x
    add t0, t3, a1 # t0 is used for address of entry of matrix[i,j]
    lb s4, 16(a0) # s4 = node->gray_value, upper 4 bytes are all 0 so we use lb instead of lw
    sb s4, 0(t0) # write the gray value into matrix
    addi t2, t2, 1 # j++
    j loop_visit_y # "for"
exitloop:
children:
    addi sp, sp, -8
    sw a0, 0(sp)
    sw ra, 4(sp) #store its father as well as ra
    lw a0, 20(a0) # now a0 becomes the pointer to NW child
    jal quad2matrix # recursive: check it again
    lw a0, 0(sp) # restore the root as it originally is
    lw ra, 4(sp) # restore the return address
    addi sp, sp, 8 # pull the pointer back
    addi sp, sp, -8
    sw a0, 0(sp)
    sw ra, 4(sp) #store its father as well as ra
    lw a0, 24(a0) # now a0 becomes the pointer to NE child
    jal quad2matrix # recursive: check it again
    lw a0, 0(sp) # restore the root as it originally is
    lw ra, 4(sp) # restore the return address
    addi sp, sp, 8 # pull the pointer back
    addi sp, sp, -8
    sw a0, 0(sp)
    sw ra, 4(sp) #store its father as well as ra
    lw a0, 28(a0) # now a0 becomes the pointer to SE child
    jal quad2matrix # recursive: check it again
    lw a0, 0(sp) # restore the root as it originally is
    lw ra, 4(sp) # restore the return address
    addi sp, sp, 8 # pull the pointer back
    addi sp, sp, -8
    sw a0, 0(sp)
    sw ra, 4(sp) #store its father as well as ra
    lw a0, 32(a0) # now a0 becomes the pointer to SW child
    jal quad2matrix # recursive: check it again
    lw a0, 0(sp) # restore the root as it originally is
    lw ra, 4(sp) # restore the return address
    addi sp, sp, 8 # pull the pointer back
exit: #done
    jr ra
